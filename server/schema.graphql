type Query {
  # message
  messagesByUser: [Message!]!
  signalsByUser: [Signal!]!
  messageById(data: MessageWhereUniqueInput!): Message
  # user
  loginUser(data: UserLoginInput!): AuthPayload!
  currentUser: User!
  #Link
  linkByMessage: [Link!]!
}

type Mutation {
  signupUser(data: UserCreateInput!): User!
  deleteUser(data: UserWhereUniqueInput!): User
  createMessage(data: MessageCreateInput): Message!
  createSignal(data: MessageCreateInput): Signal!
  deleteMessage(data: MessageWhereUniqueInput!): Message
  createMessageLink(data: LinkCreateInput!): Link!
  createSignalLink(data: SignalLinkCreateInput!): Link!
  deleteLink(data: LinkWhereUniqueInput!): Link
}

# ================== custom types

type Link {
  content: String!
  expiry: String
}

type Message {
  id: ID!
  content: String!
  title: String!
  links: [Link!]
}

type Signal {
  id: ID!
  title: String!
  link: Link
  content: String
  createdAt: String
}

type User {
  id: ID!
  email: String!
  name: String
  messages: [Message!]
}

type Key {
  id: ID!
  key: String!
  messageId: ID!
}

type AuthPayload {
  token: String!
}

# =================== input types

input UserCreateInput {
  email: String!
  password: String!
  name: String!
}

input UserLoginInput {
  email: String!
  password: String!
}

input KeyCreateInput {
  key: String!
  messageId: ID!
}

input MessageCreateInput {
  content: String!
  title: String!
}

input LinkCreateInput {
  messageId: ID!
  expiry: String
}

input SignalLinkCreateInput {
  signalId: ID!
  key: String!
  IV: String!
}

input MessageWhereUniqueInput {
  id: ID!
}

input LinkWhereUniqueInput {
  id: ID!
}

input UserWhereUniqueInput {
  id: ID!
}
