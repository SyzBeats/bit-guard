generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  email     String      @unique
  password  String
  name      String
  confirmed Boolean     @default(false)
  Message   Message[]
  Metrics   Metrics[]
  RateLimit RateLimit[]
  Signal    Signal[]
}

model RateLimit {
  id       String   @id @default(uuid())
  userId   String
  expire   DateTime
  hitCount Int
  owner    User     @relation(fields: [userId], references: [id])
}

model Metrics {
  id     String @id @default(uuid())
  type   String
  value  String
  userId String
  owner  User   @relation(fields: [userId], references: [id])
}

model Message {
  id        String   @id @default(uuid())
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  password  String?
  owner     User     @relation(fields: [userId], references: [id])
  links     Link[]
}

model Signal {
  id        String     @id @default(uuid())
  userId    String
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  title     String
  owner     User       @relation(fields: [userId], references: [id])
  type      SignalType @relation(fields: [typeId], references: [id])
  typeId    String
}

model PublicSignal {
  id        String     @id @default(uuid())
  title     String
  content   String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  typeId    String
  type      SignalType @relation(fields: [typeId], references: [id])
}

model SignalType {
  id           String         @id @default(uuid())
  name         Type           @default(TEXT)
  Signal       Signal[]
  PublicSignal PublicSignal[]
}

model Link {
  id        String    @id @default(uuid())
  messageId String
  content   String
  createdAt DateTime  @default(now())
  expiry    DateTime?
  message   Message   @relation(fields: [messageId], references: [id])
}

// enums 
enum Type {
  TEXT
  IMAGE
  VIDEO
  AUDIO
  FILE
}
